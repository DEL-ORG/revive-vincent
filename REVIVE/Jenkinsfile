pipeline {
    agent any

    // environment {
    //     AWS_Cred = 'AWS_Cred'
    // }

    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        //skipDefaultCheckout(true)
        disableConcurrentBuilds()
        timeout (time: 10, unit: 'MINUTES')
        timestamps() 
    }

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                          string(name: 'TAG_NUMBER',
                            defaultValue: '',
                            description: '''Enter your tag number here..example: 1.0.0'''),
                          string(name: 'BRANCH',
                            defaultValue: '',
                            description: '''Enter the branch you wish to tag'''),
                          string(name: 'COMMIT_MESSAGE',
                            defaultValue: '',
                            description: '''Enter your commit message here'''),
                          string(name: 'DEPLOYER_NAME',
                            defaultValue: '',
                            description: '''Enter your name here'''),
                        ])
                    ])
                }
            }
        }
        stage('sanity check') {
            steps {
               sh ' bash $WORKSPACE/tag.sh $TAG_NUMBER $BRANCH $COMMIT_MESSAGE $DEPLOYER_NAME '
            }
        }
        stage('Clone Repo') {
            steps {
                script {
                    sh 'rm -rf * || true'
                    checkout scmGit(branches: [[name: '*/$BRANCH']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-key', url: 'git@github.com:DEL-ORG/S6-PROJECTS.git']])
                }
            }
        }
        stage('tag & push') {
            steps {
              sh('''
                 cd $WORKSPACE/
                  git config --global user.email "info@devopseasylearning.com"
                  git config --global user.name "devopseasylearning"
                  ''')
                sshagent (credentials: ['github-key']){
                sh('git tag -a v$TAG_NUMBER -m "$COMMIT_MESSAGE"')
                sh('git push origin v$TAG_NUMBER')
                }
            }
        }
    }

    stages {
        stage('Test microservice catalog') {
            agent any {
             docker {
               image 'golang:1.20.1'
               args '-u 0:0'
            }    
        }
            steps {
                sh '''
            cd $WORKSPACE/REVIVE/src/catalog/
            go test 
            ls                       
                '''
            }

        }
    post {
      success {
          slackSend color: '#2EB67D',
          channel: 'a1-catchup-jenkins', 
          message: "REVIVE Project Build Status" +
          "\n Project Name: REVIVE" +
          "\n Job Name: ${env.JOB_NAME}" +
          "\n Build number: ${currentBuild.displayName}" +
          "\n Build Status : SUCCESS" +
          "\n Build url : ${env.BUILD_URL}"
      }
      failure {
          slackSend color: '#E01E5A',
          channel: 'a1-catchup-jenkins',  
          message: "REVIVE Project Build Status" +
          "\n Project Name: REVIVE" +
          "\n Job Name: ${env.JOB_NAME}" +
          "\n Build number: ${currentBuild.displayName}" +
          "\n Build Status : FAILED" +
          "\n Build User : a1jenkins" +
          "\n Action : Please check the console output to fix this job IMMEDIATELY" +
          "\n Build url : ${env.BUILD_URL}"
      }
      unstable {
          slackSend color: '#ECB22E',
          channel: 'a1-catchup-jenkins', 
          message: "REVIVE Project Build Status" +
          "\n Project Name: REVIVE" +
          "\n Job Name: ${env.JOB_NAME}" +
          "\n Build number: ${currentBuild.displayName}" +
          "\n Build Status : UNSTABLE" +
          "\n Action : Please check the console output to fix this job IMMEDIATELY" +
          "\n Build url : ${env.BUILD_URL}"
      }   
}

}
}   

