pipeline {
    agent any

    environment {
        docker_hub_credential = credentials("dockerhub-jenkins")
        github_credential = credentials("github-ssh")
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
        timestamps() 
    }
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'feature-branch-vincent', description: 'Enter the name of the branch')
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'github-ssh',
                        url: 'https://github.com/DEL-ORG/revive-vincent.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
            withCredentials([usernamePassword(credentialsId: 'dockerhub-jenkins',
            usernameVariable: 'DOCKERHUB_USERNAME',
            passwordVariable: 'DOCKERHUB_PASSWORD')]) {
            sh '''
                docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            '''
                }
            }
        }

        stage('test ui') {
            agent {
             docker {
               image 'eric1981/ui-maven:v1.0.0'
               args '-u root:root'
            }    
        } 
            steps {
                sh """
            cd REVIVE/src/ui
            mvn test -DskipTests=true
                """
            }
        
        }


    //     stage('test catalog') {
    //         agent {
    //          docker {
    //            image 'eric1981/catalog-golang:v3.19'
    //            args '-u 0:0'
    //         }    
    //     }
    //     steps {
    //             sh '''
    //         cd REVIVE/src/catalog 
    //         go test -buildscv=false
    //             '''
    //         }
        
    //     }
    
    //     stage('create directory') {
    //         steps {
    //             script {
    //                 sh """
    //                 mkdir banana rice 
    //                 """
    //             }
    //         }
    //     }

    //     stage('delete directory and file') {
    //         steps {
    //             script {
    //                 sh """
    //                 rm -rf banana rice 
    //                 """
    //             }
    //         }
    //     } 
      
    }

    // post {
    //   always {
    //     success {
    //         slackSend color: '#2EB67D',
    //         channel: 'a1-catchup-jenkins', 
    //         message: "*Revive Project Build Status*" +
    //         "\n Project Name: Revive" +
    //         "\n Job Name: ${env.JOB_NAME}" +
    //         "\n Build number: ${currentBuild.displayName}" +
    //         "\n Build Status : *SUCCESS*" +
    //         "\n Build url : ${env.BUILD_URL}"
    //     }
    //     failure {
    //         slackSend color: '#E01E5A',
    //         channel: 'a1-catchup-jenkins',  
    //         message: "*Revive Project Build Status*" +
    //         "\n Project Name: Revive" +
    //         "\n Job Name: ${env.JOB_NAME}" +
    //         "\n Build number: ${currentBuild.displayName}" +
    //         "\n Build Status : *FAILED*" +
    //         "\n Build User : *Tia*" +
    //         "\n Action : Please check the console output to fix this job IMMEDIATELY" +
    //         "\n Build url : ${env.BUILD_URL}"
    //     }
    //   }  

}

    
